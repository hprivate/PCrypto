"""
免责声明：
本脚本中的参数和题目来源于网络，仅用于个人学习和研究目的。如若侵权，请联系删除。
我们不对因使用此脚本而导致的任何直接或间接损害承担责任。
脚本由 ChatGPT 辅助编写
"""

from sympy import mod_inverse

# 给定的参数
p = 8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229
q = 12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469
dp = 6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929
dq = 783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041
c = 24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852


# dp 是 d mod (p-1)，其中 d 是RSA私钥指数。
# dq 是 d mod (q-1)，其中 d 是RSA私钥指数。

# 计算n
n = p * q

# 计算q_inv
q_inv = mod_inverse(q, p)

# pow(x,y,z) ：(x^y) mod z
# 计算m1和m2
m1 = pow(c, dp, p)
m2 = pow(c, dq, q)

# 使用中国剩余定理计算解密后的消息
h = (q_inv * (m1 - m2)) % p
m = m2 + h * q

m_bytes = m.to_bytes((m.bit_length() + 7) // 8, byteorder='big')
m_str = m_bytes.decode('utf-8')

# 打印解密后的消息
print("解密后的消息:", m_str)
