"""
免责声明：
本脚本中的参数和题目来源于网络，仅用于个人学习和研究目的。如若侵权，请联系删除。
我们不对因使用此脚本而导致的任何直接或间接损害承担责任。
脚本由 ChatGPT 辅助编写
"""

from gmpy2 import invert
import binascii

def common_modulus_attack(n, c1, c2, e1, e2):
    """
    使用共模攻击解密RSA加密的密文。

    参数:
    n (int): RSA模数
    c1 (int): 第一个密文
    c2 (int): 第二个密文
    e1 (int): 第一个公钥指数
    e2 (int): 第二个公钥指数

    返回:
    int: 解密后的明文
    """
    def extended_gcd(a, b):
        """
        扩展欧几里得算法，用于求解两个数的最大公约数及其系数。

        参数:
        a (int): 第一个数
        b (int): 第二个数

        返回:
        tuple: (gcd, x, y)，其中 gcd 是最大公约数，x 和 y 是满足 ax + by = gcd 的系数
        """
        if b == 0:
            return a, 1, 0
        else:
            gcd, x, y = extended_gcd(b, a % b)
            return gcd, y, x - (a // b) * y

    # 使用扩展欧几里得算法计算 e1 和 e2 的最大公约数及其系数
    gcd, coefficient1, coefficient2 = extended_gcd(e1, e2)

    # 如果系数为负数，则求模反元素
    if coefficient1 < 0:
        coefficient1 = -coefficient1
        c1 = invert(c1, n)
    elif coefficient2 < 0:
        coefficient2 = -coefficient2
        c2 = invert(c2, n)

    # 计算解密后的明文
    plaintext = pow(c1, coefficient1, n) * pow(c2, coefficient2, n) % n
    return plaintext

# 给定的参数和密文
c1 = 22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361
n = 22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801
e1 = 11187289
c2 = 18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397
e2 = 9647291

# 使用共模攻击解密密文
plaintext = common_modulus_attack(n, c1, c2, e1, e2)

# 输出解密后的结果
print("解密后的明文（十进制）：", plaintext)
print("解密后的明文（ASCII）：", binascii.unhexlify(hex(plaintext)[2:]).decode('utf-8'))
